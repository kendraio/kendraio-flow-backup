{
    "blocks": [
        {
            "type": "file-input",
            "label": "1. Load Excel (Master Format)",
            "binary": true,
            "arrayBuffer": false,
            "accept": [
                "xlsx"
            ]
        },
        {
            "type": "parse-data",
            "csvOptions": {
                "header": true,
                "skipEmptyLines": true
            },
            "xmlOptions": {}
        },
        {
            "type": "mapping",
            "mapping": "data && data.Sheet1[6:].[$.data.Sheet1[5], @].map(&fromPairs(zip([0], [1])), @)[?not_null(\"LICENSOR NAME\")]"
        },
        {
            "type": "mapping",
            "mapping": "data && {  \n    licensor: uniqBy(data[].{      id: uuid(), name: \"LICENSOR NAME\"     }, 'name'), \nparties: uniqBy(data[].{    id: uuid(),  first_name: \"Performer  First Name\",    \n  last_name: \"Performer Last Name\", fullName: join(' ', [\"Performer  First Name\", \"Performer Last Name\"])     }, 'fullName'),  \n   album: uniq(data[].\"ALBUM\")[].{ name: @,  id: uuid() },   label: uniq(data[].\"DISTRIBUTING LABEL\")[].{ name: @, id: uuid() },  \n    country: uniq(data[].split(\"RELEASE COUNTRY\" || '', `/`)[].trim(@))[?@], \n      artist: uniq(data[].[\"ALBUM ARTIST\", \"TRACK ARTIST\"][][].trim(@))[].{ name: @, id: uuid() },   \n      track: data[]}"
        },
        {
            "type": "mapping",
            "mapping": "data && merge(data, {track: uniqBy(data.track, 'key')})"
        },
        {
            "type": "mapping",
            "mapping": "data && \ndata.{ \n    licensor, album, parties, label, country, artist,     \n    track: $.data.track[].{ id: uuid(), key: join('|', map(&to_string(@), [\"TRACK TITLE\", \"TRACK ARTIST\", \"ISRC\"])), \n    licensor_uuid: find($.data.licensor, 'name', \"LICENSOR NAME\").id,   \n    track_title: \"TRACK TITLE\",  \n    track_artist_uuid: find($.data.artist, 'name', \"TRACK ARTIST\").id,  \n    album_uuid: find($.data.album, 'name', \"ALBUM\").id,  \n    distributing_label_uuid: find($.data.label, 'name', \"DISTRIBUTING LABEL\").id,   \n    isrc: \"ISRC\",   \n    upc: to_string(\"UPC\"),   \n    release_country: \"RELEASE COUNTRY\",   \n    album_uuid: find($.data.album, 'name', \"ALBUM\").id,  \n    initial_release_date: parseDate(\"INITIAL RELEASE DATE \")} }\n"
        },
        {
            "type": "mapping",
            "mapping": "merge(data, { contributions: $.data.data[].{\n     party_uuid: find($.data.parties, 'fullName',  join(' ', [\"FIRST NAME\", \"LAST NAME\"])).id,\n     rightsholder_percent: product(\"%\", `100`),\n     backing_vocals: trim(\"BCK VOCALS\") == 'Yes',\n     musician:  trim(\"MUSICIAN\") == 'Yes',\n     role: \"ROLE (PERFORMED)\",\n     instrument: \"INSTRUMENT\",\n     track_uuid: find($.data.track, 'key',  join('|', map(&to_string(@), [\"TRACK TITLE\", \"TRACK ARTIST\", \"ISRC\"]))).id\n  },\n  track: $.data.track[].omit(@, ['key']),\n  parties: $.data.parties[].omit(@, ['fullName'])\n})"
        },
        {
            "type": "debug",
            "open": 0,
            "showContext": false
        },
        {
            "type": "message",
            "title": "Data extracted for import:"
        },
        {
            "type": "debug",
            "open": 0,
            "showContext": true
        }
    ],
    "id": "mapping1Test",
    "workflowId": "mapping1Test",
    "adapterName": "transparence",
    "created": "2021-06-24T16:24:32.827Z",
    "tags": [
        "deleted"
    ],
    "updated": "2021-06-24T16:24:32.826Z",
    "modified": "2021-06-24T16:24:32.826Z",
    "title": "Transparence (Mapping 1-testing)"
}